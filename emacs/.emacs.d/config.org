* Early Startup Tasks
** Ensure we can load packages
*** use-package
Ensure that ~use-package~ is always pulled in so that the rest of the
packages can be installed.
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+END_SRC
** Disable interlocking
Interlocking interferes with many file watchers, notably webpack.
Ideally I should get around to changing the locking implementation to allow putting the lockfiles somewhere else...
#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil)
#+END_SRC
** Performance
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 8000000
        read-process-output-max (* 5 1024 1024))
#+END_SRC
*** native-comp
#+BEGIN_SRC emacs-lisp
  (unless (version< emacs-version "28.0")
    (setq native-comp-async-jobs-number 8))
#+END_SRC

* General Configuration 
** Change ~*scratch*~ major mode
By default ~*scratch*~ runs in ~lisp-interaction-mode~, which is a
~prog-mode~.  This means all the trouble we go through to delay some
package initializations until after ~prog-mode~ is useless.
#+BEGIN_SRC emacs-lisp
  (setq initial-major-mode 'fundamental-mode)
#+END_SRC
** Don't use tabs for indentation
#+BEGIN_SRC emacs-lisp
  (setq indent-tabs-mode nil)
#+END_SRC
** Don't allow lines that aren't lines
#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC
** Unbind sleep keys
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-z"))
#+END_SRC
** Visual
*** Terminal Configuration
Without this, there is a delay when making a tty frame with `emacsclient -t`.
#+BEGIN_SRC emacs-lisp
  (setq xterm-extra-capabilities nil)
#+END_SRC
*** Faces
**** Default
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
                      :height 90
                      :family "Iosevka")
 #+END_SRC
**** Markdown code face used in lsp-sideline
 #+BEGIN_SRC emacs-lisp
 (with-eval-after-load "markdown-mode"
  (set-face-attribute 'markdown-code-face nil
		       :inherit nil))
 #+END_SRC

*** Get rid of graphical prompts
#+BEGIN_SRC emacs-lisp
(setq use-dialog-box nil)
#+END_SRC

*** Hide unnecessary panels
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

*** Mode Line
**** Time and battery
#+BEGIN_SRC emacs-lisp
  (display-time-mode)
  (column-number-mode)
#+END_SRC

**** Line numbers
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook (lambda ()
                              (setq-local display-line-numbers 'relative)))
#+END_SRC

*** Themes
*** base16-tomorrow
#+BEGIN_SRC emacs-lisp
  (use-package base16-theme
    :config
    (setq base16-theme-256-color-source "colors")
    (load-theme 'base16-tomorrow-night t))
#+END_SRC
*** Tabs
#+BEGIN_SRC emacs-lisp
  (setq tab-bar-show 1)
  (set-face-attribute 'tab-bar nil
                      :inherit 'mode-line
                      :foreground 'unspecified
                      :background 'unspecified)
  (set-face-attribute 'tab-bar-tab nil
                      :inherit 'mode-line-highlight
                      :foreground 'unspecified
                      :background 'unspecified)
  (set-face-attribute 'tab-bar-tab-inactive nil
                      :inherit 'mode-line-inactive
                      :foreground 'unspecified
                      :background 'unspecified)
  (setq tab-bar-close-button-show nil)
#+END_SRC
** Prompts
"yes" is too many letters
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* Packages
** Built-in updates
*** tramp
#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :straight (tramp :build t :pre-build (("make" "autoloads")))
    :config
    (add-to-list 'tramp-connection-properties
                 (list (regexp-quote "/ssh:")
                       "direct-async-process" t))
    (connection-local-set-profile-variables
     'remote-zsh
     '((shell-file-name . "/bin/zsh"))))
  
#+END_SRC
** Bindings
*** hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra)
#+END_SRC

*** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC

** Completion and Error Checking
*** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :hook (prog-mode . company-mode)
    :config
    (setq company-dabbrev-downcase nil
          company-idle-delay 0
          company-minimum-prefix-length 2))
#+END_SRC

*** flycheck
Disable ~emacs-lisp=checkdoc~ since it causes annoying error reporting in ~org-mode~
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :hook (prog-mode . flycheck-mode)
    :config
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
#+END_SRC

** Language and Filetype Support
*** LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :config (setq lsp-rust-server 'rust-analyzer
                  lsp-enable-on-type-formatting nil)
    :hook ((rust-mode . lsp)
           (java-mode . tkn/lsp-if-in-workspace)))
  (use-package company-lsp)
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode))
#+END_SRC
*** C/C++
**** ccls
#+BEGIN_SRC emacs-lisp
  (use-package ccls
    :hook ((c-mode c++-mode) .
           (lambda ()
             (require 'ccls)
             (tkn/lsp-if-in-workspace))))
#+END_SRC

*** Clojure
**** cider
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :defer t)
#+END_SRC

**** rainbow-delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

*** Java
**** Formatting
#+BEGIN_SRC emacs-lisp
  (add-hook 'java-mode-hook (lambda ()
                              (setq c-basic-offset 4
                                    tab-width 4
                                    indent-tabs-mode t)))
#+END_SRC
**** lsp-java
#+BEGIN_SRC emacs-lisp
  (use-package lsp-java
    :defer t
    :config (setq lsp-java-format-on-type-enabled nil))
#+END_SRC
*** JS/TS
**** Formatting
#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2
        typescript-indent-level 2)
#+END_SRC
**** rjsx-mode
#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode
    :defer t
    :mode ("\\.jsx$" "\\.tsx$")
    :config (setq js2-basic-offset 2
                  js2-strict-missing-semi-warning nil))
#+END_SRC
**** prettier
#+BEGIN_SRC emacs-lisp
  (use-package prettier-js
    :defer t
    :hook (rjsx-mode . prettier-js-mode))
#+END_SRC
**** Vue
#+BEGIN_SRC emacs-lisp
  (use-package vue-mode
    :defer t
    :hook (mmm-mode . (lambda () (set-face-background 'mmm-default-submode-face nil))))
#+END_SRC
**** Typescript
#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :defer t
    :hook (typescript-mode . tkn/lsp-if-in-workspace))
#+END_SRC
*** LaTeX
**** AUCTeX
#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :defer t
    :config
    (setq TeX-auto-save t
          TeX-parse-self t
          TeX-view-program-selection '((output-pdf "PDF Tools"))
          TeX-source-correlate-start-server t
          LaTeX-beamer-item-overlay-flag nil)
    (setq-default TeX-master nil
                  TeX-engine 'luatex)
    (add-hook 'TeX-after-compilation-finished-functions 
              'TeX-revert-document-buffer))
  (use-package company-auctex
    :defer t)
#+END_SRC
*** OCaml
#+BEGIN_SRC emacs-lisp
  (use-package tuareg
    :defer t)
#+END_SRC
*** Python
#+BEGIN_SRC emacs-lisp
  (use-package lsp-python-ms
    :init (setq lsp-python-ms-auto-install-server t)
    :hook (python-mode . (lambda ()
                            (require 'lsp-python-ms)
                            (tkn/lsp-if-in-workspace))))
#+END_SRC
*** Ruby
#+BEGIN_SRC emacs-lisp
  (use-package enh-ruby-mode
    :config (setq lsp-solargraph-diagnostics nil
                  lsp-solargraph-use-bundler t)
    :hook ((ruby-mode . enh-ruby-mode)
           (enh-ruby-mode . lsp)))

#+END_SRC
*** Rust
**** rust-mode
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :defer t)
#+END_SRC
*** Scala
**** scala-mode
#+BEGIN_SRC emacs-lisp
  (use-package scala-mode
    :hook (scala-mode . lsp))
#+END_SRC

*** Haskell
**** haskell-mode
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode)
#+END_SRC

*** PDF
**** pdf-tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :defer t
    :config
    (pdf-tools-install))
#+END_SRC
*** TOML
#+BEGIN_SRC emacs-lisp
  (use-package conf-mode
    :demand t 
    :config (add-hook 'conf-toml-mode-hook 'smartparens-mode))

#+END_SRC

** Motion, Editing, and Navigation
*** avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :bind (("C-'" . 'avy-goto-char)))
#+END_SRC

*** ace-window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :defer t
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+END_SRC

*** expand-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind (("C-;" . 'er/expand-region)))
#+END_SRC

*** smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :config 
    (require 'smartparens-config)
    (setq-default sp-escape-quotes-after-insert nil)
    :hook (prog-mode . smartparens-mode))
#+END_SRC

*** multiple-cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :defer t)
#+END_SRC

** Paradigms
*** ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :config
  (ivy-mode 1)
  (use-package counsel)
  (use-package swiper)
  (counsel-mode)
  (setq ivy-initial-inputs-alist nil)
  :bind (("C-S-s" . 'swiper)))
#+END_SRC

** Snippets
*** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :defer t
    :hook (prog-mode . yas-minor-mode))
#+END_SRC
**** snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :defer t
    :after (yasnippet)
    :config (yas-reload-all))
#+END_SRC
** Version Control, Projects, and Workflow
*** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :defer t
    :bind (("C-c g" . 'magit-status)))
#+END_SRC

*** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :init
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+END_SRC
**** Counsel/Ivy integration
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :config
    (counsel-projectile-mode))
#+END_SRC

* Mode configuration
** cc mode
#+BEGIN_SRC emacs-lisp
  (setq c-default-style '((java-mode . "java")
                         (awk-mode . "awk")
                         (c-mode . "java")
                         (c++-mode . "java")))

  ;; Why would someone indent a template
  (c-set-offset 'topmost-intro-cont 0 nil)
#+END_SRC
** org-mode
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook 'yas-minor-mode)
     (add-hook 'org-mode-hook 'org-indent-mode)
     (add-hook 'org-mode-hook 'flyspell-mode)
     (add-hook 'org-mode-hook (lambda () (require 'org-tempo)))
   #+END_SRC

* Functions
** Buffer management
#+BEGIN_SRC emacs-lisp
  (defun tkn/kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun tkn/clean-open-buffers (&optional keep)
    (interactive)
    (mapc (lambda (buffer)
            (let ((name (buffer-name buffer)))
              (unless (or (string-equal "*scratch*" name)
                          (string-equal "*Messages*" name)
                          (eq buffer keep))
                (kill-buffer buffer)))) (buffer-list))
    (delete-other-windows)
    (switch-to-buffer (or keep "*scratch*")))
#+END_SRC

** edit/view configuration
#+BEGIN_SRC emacs-lisp
  (defun tkn/find-config ()
    (interactive)
    (find-file (expand-file-name "~/.emacs.d/config.org")))
  (defun tkn/reload-config ()
    (interactive)
    (tkn/load-configs))
#+END_SRC
** Load favourite
#+BEGIN_SRC emacs-lisp
  (defun tkn/find-favourite ()
    (interactive)
    (let ((file (ivy-read "Favourite: " tkn/favourites-list)))
      (find-file file)))
#+END_SRC
** Helpers
*** lsp
Lots of files aren't in project workspaces. I don't want to launch
lsp-mode for them, even if only to add them to the "ignore
list". Instead, I'll explicitly add workspaces I _do_ want lsp-mode to
run in.
#+BEGIN_SRC emacs-lisp
  (defun tkn/lsp-if-in-workspace ()
    (interactive)
    (when (lsp-workspace-root)
      (lsp)))
#+END_SRC
*** lsp-remote
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load "lsp-mode"
    (defun tkn/make-remote-lsp-client (original-client-id new-client-id new-connection)
      (let* ((client (copy-lsp--client (gethash original-client-id lsp-clients))))
        (setf (lsp--client-new-connection client) new-connection)
        (setf (lsp--client-remote? client) t)
        (setf (lsp--client-server-id client) new-client-id)
        (lsp-register-client client))))
  (with-eval-after-load "lsp-rust"
    (tkn/make-remote-lsp-client
     'rust-analyzer
     'rust-analyzer-remote
     (lsp-tramp-connection (lambda () "rust-analyzer"))))
#+END_SRC
* Miscellaneous Bindings
** Windmove
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-S-h") 'windmove-left)
  (global-set-key (kbd "C-S-j") 'windmove-down)
  (global-set-key (kbd "C-S-k") 'windmove-up)
  (global-set-key (kbd "C-S-l") 'windmove-right)
#+END_SRC
** Hydras
*** Configuration
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-config (:color blue)
    "config"
    ("f" tkn/find-config "find")
    ("r" tkn/reload-config "reload")
    ("if" (find-file (concat user-emacs-directory "init.el")) "find init.el")
    ("ef" (find-file (concat user-emacs-directory "early-init.el")) "find early-init.el")
    ("of" (counsel-find-file (concat user-emacs-directory "org")) "find other configuration")
    ("ir" (load-file (concat user-emacs-directory "init.el")) "reload init.el"))
  (global-set-key (kbd "C-z c") 'hydra-config/body)
#+END_SRC
*** Current buffer
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-buffer (:color blue)
    "current buffer"
    ("r" revert-buffer "revert")
    ("c" tkn/clean-open-buffers "clean up")
    ("k" tkn/kill-current-buffer "kill")
    ("K" kill-buffer-and-window "kill with window"))
  (global-set-key (kbd "C-z b") 'hydra-buffer/body)
#+END_SRC
*** Hydra index
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-index (:color blue)
    ("s" hydra-smartparens/body "smartparens")
    ("m" hydra-multiple-cursors/body "multiple-cursors")
    ("r" hydra-rectangle/body "rectangles")
    ("e" hydra-lsp/body "editing")
    ("f" tkn/find-favourite "favourite"))
  (global-set-key (kbd "C-z z") 'hydra-index/body)
#+END_SRC
*** multiple-cursors
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-multiple-cursors (:color red)
    "multiple cursors"
    ("e" mc/edit-lines "edit lines" :color blue)
    ("a" mc/mark-all-like-this "mark all")
    ("n" mc/mark-next-like-this "mark next")
    ("N" mc/unmark-next-like-this "unmark next")
    ("p" mc/mark-previous-like-this "mark previous")
    ("P" mc/unmark-previous-like-this "unmark previous")
    ("sn" mc/skip-to-next-like-this "skip to next")
    ("sp" mc/skip-to-previous-like-this "skip to prev"))
#+END_SRC
*** rectangles
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-rectangle (:color blue)
    "rectangles"
    ("s" string-rectange "string")
    ("i" string-insert-rectangle "string insert"))
#+END_SRC
*** lsp
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-lsp (:color blue)
    "lsp"
    ("d" lsp-find-definition "find definition")
    ("i" lsp-find-implementation "find implementation")
    ("r" lsp-find-references "find references"))
#+END_SRC
*** smartparens
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-smartparens (:color blue)
    "smartparens"
    ("(" sp-wrap-round "wrap round")
    ("{" sp-wrap-curly "wrap brace")
    ("[" sp-wrap-square "wrap square")
    ("u" sp-unwrap-sexp "unwrap")
    ("s" sp-forward-slurp-sexp "forward slurp")
    ("S" sp-backward-slurp-sexp "backward slurp")
    ("b" sp-forward-barf-sexp "forward barf")
    ("B" sp-backward-barf-sexp "backward barf")
    ("k" sp-kill-sexp "kill")
    ("K" sp-backward-kill-sexp "backward kill"))
#+END_SRC
*** Windows
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-window ()
    "window motion"
    ("a" ace-window "ace" :color blue)
    ("b" windmove-left "left")
    ("n" windmove-down "down")
    ("p" windmove-up "up")
    ("f" windmove-right "right"))
  (global-set-key (kbd "C-z w") 'hydra-window/body)
#+END_SRC
*** Tabs
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-tabs ()
    "tab motion"
    ("c" tab-bar-new-tab "create" :color blue)
    ("x" tab-bar-close-tab "close" :color blue)
    ("n" tab-bar-switch-to-next-tab "next" :color blue)
    ("p" tab-bar-switch-to-prev-tab "prev" :color blue)
    ("g" tab-bar-switch-to-tab "goto" :color blue)
    ("R" tab-bar-rename-tab "rename" :color blue)
    ("r" tab-bar-switch-to-recent-tab "recent" :color blue))
  (global-set-key (kbd "C-z t") 'hydra-tabs/body)
#+END_SRC
*** Agenda
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-agenda ()
    "Agenda operations"
    ("a" org-agenda "open agenda" :color blue)
    ("f" (counsel-find-file (car org-agenda-files)) "find" :color blue))
  (global-set-key (kbd "C-z a") 'hydra-agenda/body)
#+END_SRC
* General behaviour
** Backup/autosave location
#+BEGIN_SRC emacs-lisp
  (defconst emacs-tmp-dir (expand-file-name "~/tmp/emacs/"))
  (setq backup-directory-alist `((".*" . ,(concat emacs-tmp-dir "backup/")))
	auto-save-file-name-transforms `((".*" ,(concat emacs-tmp-dir "autosave/") t)))
#+END_SRC
** Configuration-specific settings
*** Always follow symlinks
#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC
*** Keep Emacs "custom" files untracked
#+BEGIN_SRC emacs-lisp
  (setq custom-file (tkn/emacs-d-filename "custom.el"))
  ;; File might not exist yet. Create an empty one.
  (unless (file-exists-p custom-file)
    (write-region "" nil custom-file))
  (load custom-file)
#+END_SRC

